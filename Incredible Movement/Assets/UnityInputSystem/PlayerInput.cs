//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/UnityInputSystem/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""PlayerMap"",
            ""id"": ""bd6d50a8-7af0-4ad7-8c39-3d90169e81d6"",
            ""actions"": [
                {
                    ""name"": ""Button Movement"",
                    ""type"": ""Value"",
                    ""id"": ""f2f629d7-edc1-4b2f-9299-ebdaee26efc2"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Mouse Movement"",
                    ""type"": ""Value"",
                    ""id"": ""bdbd3096-e670-43eb-8a84-97e51a5b284a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TouchMovement"",
                    ""type"": ""Value"",
                    ""id"": ""60c80266-65f1-4b6a-b964-aa708e9102bc"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseButtonPress"",
                    ""type"": ""Button"",
                    ""id"": ""70cd6133-46cf-44a0-8a3a-0e83db6f5540"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseDeltaPosition"",
                    ""type"": ""Value"",
                    ""id"": ""3ac95ed7-15e4-410f-93ca-d37bbd54476c"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TouchPressMovement"",
                    ""type"": ""Button"",
                    ""id"": ""d02b0d0a-b892-4923-bf6c-d9dfa8651184"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0a9ff9f3-009c-48da-9826-c93b060fce47"",
                    ""path"": ""<Touchscreen>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touchscreen"",
                    ""action"": ""Button Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis (A,D buttons)"",
                    ""id"": ""6cafd52e-2d3b-4268-b6c9-07e5f191559b"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Button Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""71b6769a-af2e-43fd-9dd9-e51da74421f5"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Button Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""6b6166e4-af2a-4efa-b4ec-bf803d18ced9"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Button Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis (Left Arrow, Right Arrow buttons)"",
                    ""id"": ""1fd81e4a-588f-436f-bdaa-9c19b28e391d"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Button Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""84871e0b-fc48-43ea-a866-cb250da217a8"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Button Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""8bb48087-8925-42b5-9b4c-75c2c2bb2620"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Button Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""51b7c86d-3fff-447b-b7c6-bbe324b5c9c0"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""Mouse Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6b7d18c0-6aef-466b-a651-692e827714af"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touchscreen"",
                    ""action"": ""TouchMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b0c854c5-0beb-4709-9e1f-f6a03bf7be65"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""MouseButtonPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e946e6cf-551d-4010-84f4-75074bab5840"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""MouseDeltaPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f20adc5a-a8bf-4080-b475-906ec8d6cd71"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touchscreen"",
                    ""action"": ""TouchPressMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouse and Keyboard"",
            ""bindingGroup"": ""Mouse and Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touchscreen"",
            ""bindingGroup"": ""Touchscreen"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PlayerMap
        m_PlayerMap = asset.FindActionMap("PlayerMap", throwIfNotFound: true);
        m_PlayerMap_ButtonMovement = m_PlayerMap.FindAction("Button Movement", throwIfNotFound: true);
        m_PlayerMap_MouseMovement = m_PlayerMap.FindAction("Mouse Movement", throwIfNotFound: true);
        m_PlayerMap_TouchMovement = m_PlayerMap.FindAction("TouchMovement", throwIfNotFound: true);
        m_PlayerMap_MouseButtonPress = m_PlayerMap.FindAction("MouseButtonPress", throwIfNotFound: true);
        m_PlayerMap_MouseDeltaPosition = m_PlayerMap.FindAction("MouseDeltaPosition", throwIfNotFound: true);
        m_PlayerMap_TouchPressMovement = m_PlayerMap.FindAction("TouchPressMovement", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerMap
    private readonly InputActionMap m_PlayerMap;
    private IPlayerMapActions m_PlayerMapActionsCallbackInterface;
    private readonly InputAction m_PlayerMap_ButtonMovement;
    private readonly InputAction m_PlayerMap_MouseMovement;
    private readonly InputAction m_PlayerMap_TouchMovement;
    private readonly InputAction m_PlayerMap_MouseButtonPress;
    private readonly InputAction m_PlayerMap_MouseDeltaPosition;
    private readonly InputAction m_PlayerMap_TouchPressMovement;
    public struct PlayerMapActions
    {
        private @PlayerInput m_Wrapper;
        public PlayerMapActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @ButtonMovement => m_Wrapper.m_PlayerMap_ButtonMovement;
        public InputAction @MouseMovement => m_Wrapper.m_PlayerMap_MouseMovement;
        public InputAction @TouchMovement => m_Wrapper.m_PlayerMap_TouchMovement;
        public InputAction @MouseButtonPress => m_Wrapper.m_PlayerMap_MouseButtonPress;
        public InputAction @MouseDeltaPosition => m_Wrapper.m_PlayerMap_MouseDeltaPosition;
        public InputAction @TouchPressMovement => m_Wrapper.m_PlayerMap_TouchPressMovement;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMapActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerMapActions instance)
        {
            if (m_Wrapper.m_PlayerMapActionsCallbackInterface != null)
            {
                @ButtonMovement.started -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnButtonMovement;
                @ButtonMovement.performed -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnButtonMovement;
                @ButtonMovement.canceled -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnButtonMovement;
                @MouseMovement.started -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnMouseMovement;
                @MouseMovement.performed -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnMouseMovement;
                @MouseMovement.canceled -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnMouseMovement;
                @TouchMovement.started -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnTouchMovement;
                @TouchMovement.performed -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnTouchMovement;
                @TouchMovement.canceled -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnTouchMovement;
                @MouseButtonPress.started -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnMouseButtonPress;
                @MouseButtonPress.performed -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnMouseButtonPress;
                @MouseButtonPress.canceled -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnMouseButtonPress;
                @MouseDeltaPosition.started -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnMouseDeltaPosition;
                @MouseDeltaPosition.performed -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnMouseDeltaPosition;
                @MouseDeltaPosition.canceled -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnMouseDeltaPosition;
                @TouchPressMovement.started -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnTouchPressMovement;
                @TouchPressMovement.performed -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnTouchPressMovement;
                @TouchPressMovement.canceled -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnTouchPressMovement;
            }
            m_Wrapper.m_PlayerMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ButtonMovement.started += instance.OnButtonMovement;
                @ButtonMovement.performed += instance.OnButtonMovement;
                @ButtonMovement.canceled += instance.OnButtonMovement;
                @MouseMovement.started += instance.OnMouseMovement;
                @MouseMovement.performed += instance.OnMouseMovement;
                @MouseMovement.canceled += instance.OnMouseMovement;
                @TouchMovement.started += instance.OnTouchMovement;
                @TouchMovement.performed += instance.OnTouchMovement;
                @TouchMovement.canceled += instance.OnTouchMovement;
                @MouseButtonPress.started += instance.OnMouseButtonPress;
                @MouseButtonPress.performed += instance.OnMouseButtonPress;
                @MouseButtonPress.canceled += instance.OnMouseButtonPress;
                @MouseDeltaPosition.started += instance.OnMouseDeltaPosition;
                @MouseDeltaPosition.performed += instance.OnMouseDeltaPosition;
                @MouseDeltaPosition.canceled += instance.OnMouseDeltaPosition;
                @TouchPressMovement.started += instance.OnTouchPressMovement;
                @TouchPressMovement.performed += instance.OnTouchPressMovement;
                @TouchPressMovement.canceled += instance.OnTouchPressMovement;
            }
        }
    }
    public PlayerMapActions @PlayerMap => new PlayerMapActions(this);
    private int m_MouseandKeyboardSchemeIndex = -1;
    public InputControlScheme MouseandKeyboardScheme
    {
        get
        {
            if (m_MouseandKeyboardSchemeIndex == -1) m_MouseandKeyboardSchemeIndex = asset.FindControlSchemeIndex("Mouse and Keyboard");
            return asset.controlSchemes[m_MouseandKeyboardSchemeIndex];
        }
    }
    private int m_TouchscreenSchemeIndex = -1;
    public InputControlScheme TouchscreenScheme
    {
        get
        {
            if (m_TouchscreenSchemeIndex == -1) m_TouchscreenSchemeIndex = asset.FindControlSchemeIndex("Touchscreen");
            return asset.controlSchemes[m_TouchscreenSchemeIndex];
        }
    }
    public interface IPlayerMapActions
    {
        void OnButtonMovement(InputAction.CallbackContext context);
        void OnMouseMovement(InputAction.CallbackContext context);
        void OnTouchMovement(InputAction.CallbackContext context);
        void OnMouseButtonPress(InputAction.CallbackContext context);
        void OnMouseDeltaPosition(InputAction.CallbackContext context);
        void OnTouchPressMovement(InputAction.CallbackContext context);
    }
}
